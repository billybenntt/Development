{"_id":"note:updLS6P3Xo","title":"Array.reduce","content":"\n\n# Use Cases Array.reduce\n\n#### Return Unique Values (Easy)\n* Need to always provide empty array or starting value\n* The accumulator becomes an array with a starting value\n* we add an if condition inside\n\n```jsx\n// The Accumulator is initialized with an Array that contains \"InitialValue\"\nconst getUniqueValues = topSix.reduce((accumulator, currentItem)=>{\n  // IF the Accumulator array doesn't have the item inside the object then add it\n  if (!accumulator.includes(currentItem.name)){\n    accumulator.push(currentItem.name)\n  }\n  // Once done Return the accumulator array.\n  return accumulator\n},[\"InitialValue\"])\n\nconsole.log(getUniqueValues)\n\n```\nReturns: \n> [\n  'InitialValue',\n  'Nigeria',\n  'England',\n  'USA',\n  'South Africa',\n  'Brazil',\n  'Korea'\n]\n\n\n\n\n\n#### Return Unique Values (Medium)\n\n* Need to always provide empty array or starting value\n* if the current array includes the value already return the array as it is \n* else return the new array with existing values plus the new value\n```jsx\nconst uniqueValues = (itemsArrayObjects) => {\n    return itemsArrayObjects.reduce((accumulator, currentValue) => {\n        if (accumulator.includes(currentValue.category)) {\n            return accumulator\n        } else {\n            return [...accumulator, currentValue.category]\n        }\n    }, [\"startingvalue\"])\n\n}\n```\nReturns\n> [ 'breakfast', 'lunch', 'shakes', 'dinner' ]\n\n\n### Return ALL values\n\n```js \n// Return Array with List of Names, regardless of duplicates\nconst names = topSix.reduce((accumulator, currentItem) => {\n        return [...accumulator, currentItem.name]\n    }, [\"ALl\"])\n```\n\n\n### Luhn Algorithm\n\n```js \nconst validateCred = num => {\n  // Reverse the Array and Convert to Integer\n  let arr = (num + '').split('').reverse().map(x => parseInt(x))\n  // Get the Last Digit and change initial array\n  let lastDigit = arr.splice(0, 1)[0]\n  // Get The SUM of Remaining Items\n  let sum = arr.reduce((acc, val, i) => {\n    if (i % 2 !== 0) {\n      return acc + val\n    } else {\n      // if DoubleValue > 9 Subtract 9 else return doubled value\n      let numberCheck = (val * 2) > 9 ? (val * 2) - 9 : (val * 2)\n      // Add to Accumulator\n      return acc + numberCheck\n    }\n  }, 0)\n  // Add Last Digit Back\n  sum += lastDigit\n  // Perform Check\n  return sum % 10 === 0\n}\n\n```","tags":[],"folderPathname":"/ðŸ“— BackEnd/JAVASCRIPT ES6/Array Methods","data":{},"createdAt":"2022-09-29T03:34:35.341Z","updatedAt":"2022-09-30T09:17:37.965Z","trashed":false,"_rev":"JVhPNGBPJ"}