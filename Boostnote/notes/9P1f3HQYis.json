{"_id":"note:9P1f3HQYis","title":"4. String Operations","content":"\n\n\n## String Operations\n\n- Slice from the left to the right (Positive Indexing)\n- Slice from the and right to left (Negative Indexing)\n- Concatenation\n- Slice a Range\n- Get certain position\n\n\n### String Slicing\n```python\n# --------------------------------- STRING SLICING ---------------------------------\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n# Get Everything\nprint(alphabet)\n# -> ABCDEFGHIJKLMNOPQRSTUVWXYZ\n# Get First Position\nprint(alphabet[0])\n# -> A\n# Get Last Position\nprint(alphabet[-1])\n# -> Z\n# Get First 4 Positions ( 0 to 3)\nprint(alphabet[:4])\n# Start from 5th Position to the end\nprint(alphabet[5:])\n# Get Everything but last 4 Positions\nprint(alphabet[:-4])\n# Get Range (Position 3 to 9)\nprint(alphabet[2:10])\n# Negative Indexing, Slice from right side\nprint(alphabet[-5:-2])\n````\n\n### String Concatenation\n\n- By Multiplication\n- By Sum\n````python\n# --------------------------------- TEXT CONCATENATION ---------------------------------\ntwice_alphabet = alphabet + alphabet\nthrice_alphabet = alphabet * 3\nprint(twice_alphabet)\nprint(thrice_alphabet)\n\n# -> ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\n`````\n\n### Transform Operations\n\n- Methods mostly\n- Reverse is done with slicing\n\n````python\n# --------------------------------- TEXT TRANSFORMATION ---------------------------------\n# To Lowercase\nsmall_alphabet = twice_alphabet.lower()\n# To Uppercase\nbig_alphabet = twice_alphabet.upper()\n# to Titlecase\ncapitalize_word = 'this was all lowercase'.title()\n# Reverse String\ninverted_word = big_alphabet[::-1]\n\nprint(small_alphabet)\nprint(big_alphabet)\nprint(capitalize_word)\n````\n\n\n### String Information\n\n- Not a method but rather a function\n\n```python\n# --------------------------------- STRING INFORMATION ---------------------------------\n\n# Get String length\ntext_length = len(thrice_alphabet)\nprint(text_length)\n\n# Count occurrences of string\nprint(thrice_alphabet.count(\"AB\"))\n\n```\n\n### Template String \n\n- use `f'sring'` notation\n\n````python\n# --------------------------------- TEMPLATE STRING ---------------------------------\nname = 'TERRY'\ncolor = 'RED'\n\n# Concatenate String\nmessage_one = '[' + name + '] loves the color ' + color.lower() + '!'\n\n# Template String - Same Outcome\nmessage_two = f'[{name.capitalize()}] loves the color {color.lower()}!'\n\nprint(message_one)\nprint(message_two)\n\n````","tags":[],"folderPathname":"/Python/Strings","data":{},"createdAt":"2022-09-30T14:02:09.203Z","updatedAt":"2022-10-03T11:47:17.152Z","trashed":false,"_rev":"VSqGPCR2D"}