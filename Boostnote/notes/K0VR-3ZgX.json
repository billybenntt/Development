{"_id":"note:K0VR-3ZgX","title":"5. Lifecycle Methods","content":"### Updating Component after has been rendered\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Set Initial State\n    this.state = {\n      activeUsers: 1233333,\n    };\n  }\n  // 1. Re-Render Component after has been mounted\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273,\n      });\n    }, 25000);\n  }\n  render() {\n    return (\n      <div>\n        {/* 2. Component to be Rendered */}\n        <h1>Active Users: {this.state.activeUsers}</h1>\n      </div>\n    );\n  }\n}\n\n```\n#### Adding Event Listeners\n\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\",\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // Change code below this line\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  // Change code above this line\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + \"You pressed the enter key! \",\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n}\n```","tags":[],"folderPathname":"/ğŸ“˜ FrontEnd/REACT","data":{},"createdAt":"2021-05-05T02:49:14.264Z","updatedAt":"2021-06-01T07:01:04.670Z","trashed":false,"_rev":"_16AIHREV"}