{"_id":"note:b_AQ3MRF94","title":"3. useEffect Cleanup","content":"\n# useEffect Cleanup\n\n\nEverytime useEffect is called in an unmounted component a memory leak could be caused, \ntherefore we should use the cleanup return notation to do the following:\n\n- Unsubscribe from API\n- Remove Event Listener\n- Sever any External Connection\n\nThe return function will do a cleanup\n\n```jsx\n    // Initialize State with initial Width in the form of an object\n    const [dimensions, setDimensions] = React.useState(window.innerWidth)\n\n\n    // Update the Width State whenever triggered\n    const handleResize = () => {\n        setDimensions(window.innerWidth)\n    }\n\n    // Trigger the Event Listener from External Event\n    React.useEffect(() => {\n\n        // Run when component is mounted\n        window.addEventListener(\"resize\", handleResize)\n\n       // ************** Run When the component is unmounted **************\n        return () => {\n            console.log(\"Cleanup\")\n             window.removeEventListener(\"resize\", handleResize)\n        }\n\n\n    }, [])\n\n    return (<h1>Window width: {dimensions}</h1>)\n}\n\n```","tags":[],"folderPathname":"/ðŸ“˜ FrontEnd/REACT/Effects","data":{},"createdAt":"2022-09-05T08:48:16.827Z","updatedAt":"2022-09-05T08:56:42.987Z","trashed":false,"_rev":"y008dEtYc"}