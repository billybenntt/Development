{"_id":"note:y95V-Oii2h","title":"Iterators","content":"## For Each\n\n:::note\nFor each always returns undefined\n:::\n\n```js  \n// Global Array\nconst myFruits = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\"];\n\n// Global Variable\nlet emptyVariable= \"1\";\n// Single Action Function\nconst addItem = (value) => {\n  emptyVariable += value;\n}\n// Callback Call - each item in array becomes a parameter\nmyFruits.forEach(addItem);\n// Check Result\nconsole.log(emptyVariable)\n\n//  Result\n// 1ABCDEFGHI\n\n//  Example 2\nconst fruits = ['mango', 'papaya', 'pineapple', 'apple'];\n\nconst printFruits = (iterator) => {\n    console.log(iterator)\n}\n\n//  Example 3\n\n// Call as Anonymous Function\nconst fruits = ['mango', 'papaya', 'pineapple', 'apple'];\n\n// Iterate over fruits below\nfruits.forEach(iterator => console.log(`I want to eat a ${iterator}`))\n\n````\n\n\n## Map\n```js  \n\n\n// Testing Arrays\nconst animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];\nconst bigNumbers = [100, 200, 300, 400, 500];\n\n// Create Low Order Function\nconst firstLetter = (item) => {\n    return item[0];\n}\n\n// Create Low Order Function\nconst divideNumbers = number => {\n    return number / 100;\n}\n\n// Apply Functions with High Order Array\nconst secretMessage = animals.map(firstLetter);\nconsole.log(secretMessage.join(''));\n\n// Apply Functions with High Order Array\nconst smallNumbers = bigNumbers.map(divideNumbers);\nconsole.log(smallNumbers)\n\n```\n\n## filter\n\n```js  \n\n// Test Arrays\nconst randomNumbers = [375, 200, 3.14, 7, 13, 852];\nconst favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];\n\n// Lower Order Function\nconst numberFilter = number => {\n    return number <= 250\n}\n\n// Lower Order Function\nconst wordFilter = word =>{\n    return word.length > 7\n}\n\n// Implementation\nconst smallNumbers = randomNumbers.filter(numberFilter);\nconst longFavoriteWords  = favoriteWords.filter(wordFilter)\n\n// Results\nconsole.log(smallNumbers)\nconsole.log(longFavoriteWords)\n\n```\n\n## findIndexOF\n\n```js  \nconst animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];\n\nconst foundAnimal = animals.findIndex(item => item ==='elephant')\nconsole.log(foundAnimal);\n\n\nconst startsWithS = animals.findIndex(item => item[0] ==='s');\nconsole.log(startsWithS);\n\n\n```\n\n\n## Reduce\n\n```js  \n// Test Array\nconst myNumbers = [1,2,3,4,5,6];\n// Accumulator Function\nconst sum = (base, add) => {\n    console.log(`${base} * ${add} = ${base*add}`)\n    return base * add;\n}\n// Calling the Function\nlet finalResult = myNumbers.reduce(sum);\n\n// Logging the Result\nconsole.log(finalResult)\n\n//  Short Form \nconst newNumbers = [1, 3, 5, 7];\n\nlet myResult = newNumbers.reduce((base, add) => base+add);\n\nconsole.log(myResult)\n\n\n```\n\n\n\n\n\n","tags":[],"folderPathname":"/ðŸ“— BackEnd/JAVASCRIPT ES6","data":{},"createdAt":"2022-06-27T01:04:58.218Z","updatedAt":"2022-06-27T03:14:48.312Z","trashed":false,"_rev":"pN0XrjTlg"}