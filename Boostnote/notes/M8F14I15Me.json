{"_id":"note:M8F14I15Me","title":"13. Objects Review","content":"\n\n- The object that a method belongs to is called the calling object.\n\n- The `this` keyword refers to the calling object and can be used to access properties of the calling object.\n\n- Methods do not automatically have access to other internal properties of the calling object.\n\n- The value of `this` depends on where the this is being accessed from.\n\n- We cannot use arrow functions as methods if we want to access other internal properties.\n\n- JavaScript objects do not have built-in privacy, rather there are conventions to follow to notify other developers about the intent of the code.\n\n- The usage of an underscore before a property name means that the original developer did not intend for that property to be directly changed.\n\n- Setters and getter methods allow for more detailed ways of accessing and assigning properties.\n\n- Factory functions allow us to create object instances quickly and repeatedly.\n\n- There are different ways to use object destructuring: one way is the property value shorthand and another is destructured assignment.\n\n- if you come up an array use currentobject[key]\narray will display in the form of 0 1 2 \n\n\n- if you come up an object use dot notation to access each property\n\n```js \nconst menu = {\n    // Element Properties\n    _meal: \"\",\n    _price: 0,\n    // Setter for Meal\n    set meal(mealToCheck) {\n        if (typeof mealToCheck === \"string\") {\n            this._meal = mealToCheck;\n        } else {\n            console.log(\"error\");\n        }\n    },\n    // Setter for Price\n    set price(priceToCheck) {\n        if (typeof priceToCheck === \"number\") {\n            this._price = priceToCheck\n        } else {\n            console.log(\"error\");\n        }\n    },\n\n    // Getter for meal\n   get todaysSpecial(){\n       console.log(this._price)\n       console.log(this._meal)\n\n        if (this._price && this._meal){\n            return `Todayâ€™s Special is ${this._meal} for $${this._price}!`\n        }\n        else{\n            return 'Meal or price was not set correctly!';\n        }\n\n   }\n}\n\nmenu.meal = \"Burger\";\nmenu.price = 20;\n\nconsole.log(menu.todaysSpecial)\n\n\n\n```","tags":[],"folderPathname":"/ðŸ“— BackEnd/JAVASCRIPT ES6","data":{},"createdAt":"2022-06-24T06:33:15.570Z","updatedAt":"2022-07-12T04:58:23.902Z","trashed":false,"_rev":"H3rXedajJ"}