{"_id":"note:F2hpepcQd","title":"4. Stateful Components","content":"### Stateful Component\n```js\nclass StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // Declare Current State Inside Constructor\n    this.state = {\n      name: \"myState\",\n    };\n  }\n  render() {\n    return (\n      // Render State Using the following Syntax\n      <div>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n}\n```\n\n\n### Access Stateful Component Properties\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // Declare State\n    this.state = {\n      name: \"freeCodeCamp\",\n    };\n  }\n  render() {\n    // Access State Object\n    const name = this.state.name;\n    return (\n      <div>\n        {/* Render Object */}\n        <h1>{name}</h1>\n      </div>\n    );\n  }\n}\n```\n\n\n### Modify State in a Component\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Define Initial State\n    this.state = {\n      name: \"Initial State\",\n    };\n    // 3. Bind Button to Function\n    this.handleClick = this.handleClick.bind(this);\n  }\n  // 2. Define Function to Change State\n  handleClick() {\n    // 4. Define new State for Click\n    this.setState({\n      name: \"React Rocks!\",\n    });\n  }\n  render() {\n    return (\n      <div>\n        {/*  1. Create button and Pass onClick Handler*/}\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n}\n```\n\n\n### Modify State in a Component without this\n```js\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Define Initial State\n    this.state = {\n      visibility: false,\n    };\n    // 2. Bind Button to State Function\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n  }\n  // 3. Declare State Function\n  toggleVisibility() {\n    // 4. Pass Anonymous Function without >this\n    this.setState((state) => ({\n      visibility: !state.visibility,\n    }));\n  }\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          {/*  1. Create button and Pass onClick Handler IF True*/}\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          {/*  1. Create button and Pass onClick Handler IF False*/}\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}\n```\n\n\n### Create a simple Stateful Counter\n```js\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Define Initial State\n    this.state = {\n      count: 0,\n    };\n    // 2. Bind Buttons to functions\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  // 3. Fill Functions with State Changes\n  increment() {\n    this.setState((state) => ({\n      count: state.count + 1,\n    }));\n  }\n  decrement() {\n    this.setState((state) => ({\n      count: state.count - 1,\n    }));\n  }\n  reset() {\n    this.setState((state) => ({\n      count: 0,\n    }));\n  }\n  render() {\n    return (\n      <div>\n        {/*  1. Create buttons and define Classes*/}\n        <button className=\"inc\" onClick={this.increment}>\n          Increment!\n        </button>\n        <button className=\"dec\" onClick={this.decrement}>\n          Decrement!\n        </button>\n        <button className=\"reset\" onClick={this.reset}>\n          Reset\n        </button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n}\n```\n\n### Create a controlled Input\n```js\nclass ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value });\n  }\n  render() {\n    return (\n      <div>\n        <input value={this.state.input} onChange={this.handleChange} />\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n}\n```\n\n\n### Create a controlled Form\n```js\nclass MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Declare States\n    this.state = {\n      input: \"\",\n      submit: \"\",\n    };\n    // 3. Bind Buttons\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  // 1. Declare Function Handlers\n  handleChange(event) {\n    this.setState({\n      input: event.target.value,\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      submit: this.state.input,\n    });\n  }\n  render() {\n    return (\n      <div>\n        {/* 4. Declare Form */}\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.input} onChange={this.handleChange} />\n          {/* 5.Authorize Button to Control the Form Submission */}\n          <button type=\"submit\">Submit!</button>\n        </form>\n        <h1>{this.state.submit}</h1>\n      </div>\n    );\n  }\n}\n```\n\n\n### Pass State from Parent to Children\n```js\nclass MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    // 0. Declare Parent State\n    this.state = {\n      name: \"CamperBot\",\n    };\n  }\n  render() {\n    return (\n      <div>\n        {/* 1. Pass Parent State as Prop to Child */}\n        <Navbar parentName={this.state.name} />\n      </div>\n    );\n  }\n}\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        {/* 2. Render Parent State*/}\n        <h1>Hello, my name is: {this.props.parentName}</h1>\n      </div>\n    );\n  }\n}\n```\n\n\n### Pass Handlers and States from Parent to Children\n```js\n// Parent Component\nclass MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value,\n    });\n  }\n  render() {\n    return (\n      <div>\n        {/* 1. Pass function Handler to Child 1 */}\n        <GetInput handleChange={this.handleChange} />\n        {/* 2. Pass State Changed to Child 2 */}\n        <RenderInput input={this.state.inputValue} />\n      </div>\n    );\n  }\n}\n// Child Component 1\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        {/* 3. Access Function Handler from Parent*/}\n        <input value={this.props.input} onChange={this.props.handleChange} />\n      </div>\n    );\n  }\n}\n// Child Component 2\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        {/* 4. Access updated State from Parent*/}\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n}\n```","tags":[],"folderPathname":"/React","data":{},"createdAt":"2021-04-25T00:09:05.217Z","updatedAt":"2021-05-05T02:45:11.783Z","trashed":false,"_rev":"m3d-_k5w9"}