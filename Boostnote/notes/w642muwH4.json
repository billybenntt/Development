{"_id":"note:w642muwH4","title":"18. Promises","content":"# Promises\n\n\n:::note TIPS\n\n- Promises are JavaScript objects that represent the eventual result of an asynchronous operation.\n- Promises can be in one of three states: pending, resolved, or rejected.\n- A promise is settled if it is either resolved or rejected.\n- We construct a promise by using the new keyword and passing an executor function to the Promise constructor method.\n- setTimeout() is a Node function which delays the execution of a callback function using the event-loop.\n- We use .then() with a success handler callback containing the logic for what should happen if a promise resolves.\n- We use .catch() with a failure handler callback containing the logic for what should happen if a promise rejects.\n- Promise composition enables us to write complex, asynchronous code that’s still readable. We do this by chaining multiple .then()‘s and .catch()‘s.\n- To use promise composition correctly, we have to remember to return promises constructed within a .then().\n- We should chain multiple promises rather than nesting them.\n- To take advantage of concurrency, we can use Promise.all().\n:::\n\n","tags":[],"folderPathname":"/Javascript/Advanced","data":{},"createdAt":"2021-04-15T04:52:53.792Z","updatedAt":"2022-10-03T11:43:33.470Z","trashed":false,"_rev":"LT0qJg4Zy"}