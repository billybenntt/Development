{"_id":"note:w642muwH4","title":"Promises","content":"\n\n\n### Constructing a Promise Object\n\n```js\n\n// Promise Creation\nconst executorFunction = (resolve,reject) => {\n\n}\n\n// Pass Executor function to Promise Object\n\nconst myFirstPromise = new Promise(executorFunction);\n\n```\n\n\n\n\n\n\n### Constructing a Promise Object\n```js \n// Evaluation Terms\nconst inventory = {\n    sunglasses: 0,\n    pants: 1088,\n    bags: 1344\n};\n// Step 1 - Define Executor Function\nconst myExecutor = (resolve, reject) => {\n\n    if (inventory.sunglasses > 0) {\n        resolve('Sunglasses order processed.');\n    }else{\n        reject('That item is sold out.');\n    }\n}\n// Step 2 - Pass Executor to Promise Object\nconst orderSunglasses =()=> new Promise(myExecutor);\n// Step 3 - Assign Result\nconst orderPromise = orderSunglasses();\n// Step 4 - Print Result\nconsole.log(orderPromise)\n\n```\n## Handling Promise Results\n\n```js  \n// Executor Function\nconst executorFunction = (resolve, reject) => {\n    let num = Math.random();\n    if (num < .5) {\n        resolve('Yay!');\n    } else {\n        reject('Ohhh noooo!');\n    }\n}\n// Success and Failure Callback Functions\nconst handleSuccess = (resolvedValue) => {\n    console.log(resolvedValue);\n};\n\nconst handleFailure = (rejectionReason) => {\n    console.log(rejectionReason);\n};\n// Promise Execution\nlet prom = new Promise(executorFunction);\n// Promise Result\nconsole.log(prom)\n// Promise { 'Yay!' }\n// Promise Checker\nprom.then(handleSuccess, handleFailure);\n```\n\n\n","tags":[],"folderPathname":"/ðŸ“— BackEnd/JAVASCRIPT ES6","data":{},"createdAt":"2021-04-15T04:52:53.792Z","updatedAt":"2022-07-08T06:15:58.763Z","trashed":false,"_rev":"TarjwfJlD"}